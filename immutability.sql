--CREATE TABLE WITH DATA

--DROP SEQUENCE STUDENT_ADDRESS_ID_SEQ;
CREATE SEQUENCE STUDENT_ADDRESS_ID_SEQ;

--DROP TABLE STUDENT_ADDRESS;
CREATE TABLE STUDENT_ADDRESS (
	ID 			BIGINT PRIMARY KEY DEFAULT NEXTVAL('STUDENT_ADDRESS_ID_SEQ'),
	STUDENT_ID	BIGINT NOT NULL,
	ADDRESS		VARCHAR (255) NOT NULL);
	
drop table STUDENT_ADDRESS;

INSERT INTO STUDENT_ADDRESS (STUDENT_ID, ADDRESS)
	VALUES	(1, 'Walnut Alley, 5186'),
			(2, 'Carpenter Pass, 8039'),
			(3, 'Westbourne Vale, 6782'),
			(4, 'Bishop   Street, 4792'),
			(5, 'Sheraton   Walk, 508'),
			(6, 'Byland  Pass, 8036'),
			(7, 'Chestnut  Rue, 3149'),
			(8, 'Heritage Grove, 5838'),
			(9, 'Meadow Route, 3981'),
			(10, 'Bellenden   Grove, 5234'),
			(11, 'Ernest  Boulevard, 9154'),
			(12, 'Bellenden  Crossroad, 1498'),
			(13, 'Blendon    Route, 2822'),
			(14, 'Cheney  Grove, 5294'),
			(15, 'Oxford Drive, 946');
			
--CREATE TABLE TO STORE MODIFIED DATA
--DROP TABLE STUDENT_ADDRESS_MODIFIED;
CREATE TABLE STUDENT_ADDRESS_MODIFIED (
	ID 			BIGINT NOT NULL,
	STUDENT_ID	BIGINT NOT NULL,
	ADDRESS		VARCHAR (255) NOT NULL,
	CREATED		TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

-- FUNCTION THAT INSERTS THE NEW DATA INTO STUDENT_ADDRESS_MODIFIED TABLE
-- AND DOESN'T ALLOW ANY UPDATES IN STUDENT_ADDRESS
-- IN CASE OF A TABLE WITH MORE COLUMNS, A VIABLE SOLTION WOULD BE TO REVOKE ACCESS TO UPDATE THE TABLE	
CREATE OR REPLACE FUNCTION STUDENT_ADDRESS_UPDATE_TRG_FNC()
	RETURNS TRIGGER 
	LANGUAGE plpgsql
	AS
	$$
	BEGIN
		INSERT INTO STUDENT_ADDRESS_MODIFIED (ID, STUDENT_ID, ADDRESS)
			VALUES(NEW.ID, NEW.STUDENT_ID, NEW.ADDRESS);
		NEW.ID := OLD.ID;
		NEW.STUDENT_ID := OLD.STUDENT_ID;
		NEW.ADDRESS := OLD.ADDRESS;
	RETURN NEW;
	END; $$

CREATE TRIGGER STUDENT_ADDRESS_UPDATE_TRG
BEFORE UPDATE ON STUDENT_ADDRESS
FOR EACH ROW 
EXECUTE PROCEDURE STUDENT_ADDRESS_UPDATE_TRG_FNC();