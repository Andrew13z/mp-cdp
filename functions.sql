--CREATE FUNCTION TO GET AVERAGE MARK BY STUDENT NAME AND SURNAME
CREATE FUNCTION GET_AVERAGE_STUDENT_MARK (FIRST_NAME VARCHAR, SUR_NAME VARCHAR)
RETURNS DECIMAL (3,2)
LANGUAGE PLPGSQL
AS
$$
DECLARE 
	AVERAGE_MARK DECIMAL (3,2);
BEGIN
	SELECT AVG(ER.MARK)
	INTO AVERAGE_MARK
	FROM EXAM_RESULTS ER
	JOIN STUDENTS S
	ON ER.STUDENT_ID = S.ID
	WHERE S.FIRSTNAME = FIRST_NAME AND S.SURNAME = SUR_NAME;

	RETURN AVERAGE_MARK;
END; $$

-- CHECK THE RESULT
SELECT GET_AVERAGE_STUDENT_MARK('Angela', 'Kent');

--CREATE FUNCTION TO GET AVERAGE MARK BY SUBJECT TITLE
CREATE FUNCTION GET_AVERAGE_MARK_BY_TITLE (SUBJECT_TITLE VARCHAR)
RETURNS DECIMAL (3,2)
LANGUAGE PLPGSQL
AS
$$
DECLARE 
	AVERAGE_MARK DECIMAL (3,2);
BEGIN
	SELECT AVG(ER.MARK)
	INTO AVERAGE_MARK
	FROM EXAM_RESULTS ER
	JOIN SUBJECTS S
	ON ER.SUBJECT_ID = S.ID
	WHERE S.TITLE = SUBJECT_TITLE;

	RETURN AVERAGE_MARK;
END; $$

-- CHECK THE RESULT
SELECT GET_AVERAGE_MARK_BY_TITLE('Trigonometry');

--CREATE FUNCTION TO GET STUDENT WITH ATLEAST 2 MARKS <= 3
DROP FUNCTION GET_STUDENTS_IN_RED_ZONE;
CREATE FUNCTION GET_STUDENTS_IN_RED_ZONE()
RETURNS TABLE (ID BIGINT,
			   FIRSTNAME VARCHAR(255),
			   SURNAME VARCHAR (255))
LANGUAGE PLPGSQL
AS
$$
BEGIN
	RETURN QUERY
		SELECT S.ID, S.FIRSTNAME, S.SURNAME FROM 
			(SELECT ER.STUDENT_ID, COUNT(ER.MARK) 
			 FROM EXAM_RESULTS ER
			 WHERE ER.MARK <= 3 
		 	 GROUP BY ER.STUDENT_ID) AS T
		JOIN STUDENTS S
		ON T.STUDENT_ID = S.ID
		WHERE T.COUNT >= 2;
END; $$

-- CHECK THE RESULT
SELECT * FROM GET_STUDENTS_IN_RED_ZONE();         
